{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport Navbar from \"../../components/Navbar/Navbar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Air from \"../../../assets/icons/air.png\";\nimport Sensor from \"../../../assets/icons/sensor.png\";\nimport DevicesOptions from \"../../components/DevicesOptions/DevicesOptions.js\";\nimport Control from \"../../components/DevicesOptions/Control/Control.js\";\nimport SensorFocused from \"../../components/DevicesOptions/SensorFocused/SensorFocused.js\";\nimport styles from \"./styles.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Devices = function Devices(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(50),\n    _useState2 = _slicedToArray(_useState, 2),\n    secondTop = _useState2[0],\n    setSecondTop = _useState2[1];\n  var _useState3 = useState(0.15),\n    _useState4 = _slicedToArray(_useState3, 2),\n    firstFlex = _useState4[0],\n    setFirstFlex = _useState4[1];\n  var _useState5 = useState(0.15),\n    _useState6 = _slicedToArray(_useState5, 2),\n    secondFlex = _useState6[0],\n    setSecondFlex = _useState6[1];\n  var _useState7 = useState(\"flex\"),\n    _useState8 = _slicedToArray(_useState7, 2),\n    firstDisplay = _useState8[0],\n    setFirstDisplay = _useState8[1];\n  var _useState9 = useState(\"flex\"),\n    _useState10 = _slicedToArray(_useState9, 2),\n    secondDisplay = _useState10[0],\n    setSecondDisplay = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    isFirstFocused = _useState12[0],\n    setisFirstFocused = _useState12[1];\n  var _useState13 = useState(false),\n    _useState14 = _slicedToArray(_useState13, 2),\n    isSecondFocused = _useState14[0],\n    setisSecondFocused = _useState14[1];\n  function focusFirstDevicesOptions() {\n    setisFirstFocused(!isFirstFocused);\n    if (!isFirstFocused) {\n      setSecondFlex(0);\n      setSecondDisplay(\"none\");\n    } else {\n      setFirstFlex(0.15);\n      setSecondFlex(0.15);\n      setSecondDisplay(\"flex\");\n    }\n  }\n  function focusSecondDevicesOptions() {\n    setisSecondFocused(!isSecondFocused);\n    if (!isSecondFocused) {\n      setFirstFlex(0);\n      setFirstDisplay(\"none\");\n      setSecondTop(20);\n    } else {\n      setSecondFlex(0.15);\n      setFirstFlex(0.15);\n      setFirstDisplay(\"flex\");\n      setSecondTop(50);\n    }\n  }\n  return _jsxs(_Fragment, {\n    children: [_jsx(Navbar, {\n      title: \"OP\",\n      description: \"Select a option to see it or change the status\",\n      nav: navigation\n    }), _jsxs(View, {\n      style: styles.containerContent,\n      children: [_jsx(TouchableOpacity, {\n        style: {\n          flex: firstFlex,\n          width: \"85%\",\n          marginTop: \"5%\",\n          display: firstDisplay\n        },\n        onPress: focusFirstDevicesOptions,\n        children: _jsx(DevicesOptions, {\n          title: \"Controle\",\n          iconWidth: 40,\n          iconHeight: 37,\n          icon: Air\n        })\n      }), _jsx(TouchableOpacity, {\n        style: {\n          flex: secondFlex,\n          width: \"85%\",\n          top: secondTop,\n          display: secondDisplay\n        },\n        onPress: focusSecondDevicesOptions,\n        children: _jsx(DevicesOptions, {\n          title: \"Monitoramento\",\n          iconWidth: 50,\n          iconHeight: 40,\n          icon: Sensor\n        })\n      }), isFirstFocused ? _jsx(Control, {\n        title: \"Controle\",\n        iconWidth: 40,\n        iconHeight: 37,\n        icon: Air\n      }) : null, isSecondFocused ? _jsx(SensorFocused, {\n        title: \"Monitoramento\",\n        iconWidth: 40,\n        iconHeight: 37,\n        icon: Sensor\n      }) : null]\n    })]\n  });\n};\nexport default Devices;","map":{"version":3,"names":["React","useState","Navbar","View","TouchableOpacity","Air","Sensor","DevicesOptions","Control","SensorFocused","styles","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Devices","_ref","navigation","_useState","_useState2","_slicedToArray","secondTop","setSecondTop","_useState3","_useState4","firstFlex","setFirstFlex","_useState5","_useState6","secondFlex","setSecondFlex","_useState7","_useState8","firstDisplay","setFirstDisplay","_useState9","_useState10","secondDisplay","setSecondDisplay","_useState11","_useState12","isFirstFocused","setisFirstFocused","_useState13","_useState14","isSecondFocused","setisSecondFocused","focusFirstDevicesOptions","focusSecondDevicesOptions","children","title","description","nav","style","containerContent","flex","width","marginTop","display","onPress","iconWidth","iconHeight","icon","top"],"sources":["C:/Users/esilva54/Documents/Projetos-estudo/RNJS/app11/src/Pages/Devices/Devices.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Navbar from \"../../components/Navbar/Navbar\";\r\nimport { View, TouchableOpacity } from \"react-native\";\r\nimport Air from \"../../../assets/icons/air.png\";\r\nimport Sensor from \"../../../assets/icons/sensor.png\";\r\nimport DevicesOptions from \"../../components/DevicesOptions/DevicesOptions.js\";\r\nimport Control from \"../../components/DevicesOptions/Control/Control.js\";\r\nimport SensorFocused from \"../../components/DevicesOptions/SensorFocused/SensorFocused.js\";\r\n\r\nimport styles from \"./styles.js\";\r\n\r\n// This devices returns the two main functions of our app:\r\n// A component, DeviceOptions, that holds all options that\r\n// user will be able to choose in order to control the\r\n// air conditioner functions.\r\n// And the same component, DeviceOptions, that holds all\r\n// the information returned from the sensors we are connected to.\r\nconst Devices = ({ navigation }) => {\r\n\r\n  const [secondTop, setSecondTop] = useState(50);\r\n  const [firstFlex, setFirstFlex] = useState(0.15);\r\n  const [secondFlex, setSecondFlex] = useState(0.15);\r\n  const [firstDisplay, setFirstDisplay] = useState(\"flex\");\r\n  const [secondDisplay, setSecondDisplay] = useState(\"flex\");\r\n\r\n  const [isFirstFocused, setisFirstFocused] = useState(false);\r\n  const [isSecondFocused, setisSecondFocused] = useState(false);\r\n\r\n  // This function handles the touch in DevicesOptions component\r\n  // and changes the flex from the first/second component depending\r\n  // on which component is pressed\r\n  function focusFirstDevicesOptions() {\r\n    setisFirstFocused(!isFirstFocused);\r\n\r\n    if (!isFirstFocused) {\r\n      setSecondFlex(0);\r\n      setSecondDisplay(\"none\");\r\n    } else {\r\n      setFirstFlex(0.15);\r\n      setSecondFlex(0.15);\r\n      setSecondDisplay(\"flex\");\r\n    }\r\n  }\r\n\r\n  function focusSecondDevicesOptions() {\r\n    setisSecondFocused(!isSecondFocused);\r\n\r\n    if (!isSecondFocused) {\r\n      setFirstFlex(0);\r\n      setFirstDisplay(\"none\");\r\n      setSecondTop(20);\r\n    } else {\r\n      setSecondFlex(0.15);\r\n      setFirstFlex(0.15);\r\n      setFirstDisplay(\"flex\");\r\n      setSecondTop(50);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Navbar\r\n        title=\"OP\"\r\n        description=\"Select a option to see it or change the status\"\r\n        nav={navigation}\r\n      />\r\n      <View style={styles.containerContent}>\r\n        <TouchableOpacity\r\n          style={{\r\n            flex: firstFlex,\r\n            width: \"85%\",\r\n            marginTop: \"5%\",\r\n            display: firstDisplay,\r\n          }}\r\n          onPress={focusFirstDevicesOptions}>\r\n          <DevicesOptions\r\n            title=\"Controle\"\r\n            iconWidth={40}\r\n            iconHeight={37}\r\n            icon={Air}\r\n          ></DevicesOptions>\r\n        </TouchableOpacity>\r\n\r\n        <TouchableOpacity\r\n          style={{\r\n            flex: secondFlex,\r\n            width: \"85%\",\r\n            top: secondTop,\r\n            display: secondDisplay,\r\n          }}\r\n          onPress={focusSecondDevicesOptions}>\r\n          <DevicesOptions\r\n            title=\"Monitoramento\"\r\n            iconWidth={50}\r\n            iconHeight={40}\r\n            icon={Sensor}\r\n          ></DevicesOptions>\r\n        </TouchableOpacity>\r\n\r\n        {isFirstFocused ? (\r\n          <Control\r\n            title=\"Controle\"\r\n            iconWidth={40}\r\n            iconHeight={37}\r\n            icon={Air}\r\n          ></Control>\r\n        ) : null}\r\n\r\n        {isSecondFocused ? (\r\n          <SensorFocused\r\n            title=\"Monitoramento\"\r\n            iconWidth={40}\r\n            iconHeight={37}\r\n            icon={Sensor}\r\n          ></SensorFocused>\r\n        ) : null}\r\n\r\n      </View>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Devices;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}