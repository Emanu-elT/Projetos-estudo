{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport AppLoading from 'expo-app-loading';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport DevicesWhite from \"../../../assets/icons/devices.png\";\nimport AlertGray from \"../../../assets/icons/alert-gray.png\";\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport Devices from \"../Devices/Devices.js\";\nimport AboutTeam from \"../../Pages/AboutTeam/AboutTeam.js\";\nimport { useFonts, Roboto_100Thin, Roboto_100Thin_Italic, Roboto_300Light, Roboto_300Light_Italic, Roboto_400Regular, Roboto_400Regular_Italic, Roboto_500Medium, Roboto_500Medium_Italic, Roboto_700Bold, Roboto_700Bold_Italic, Roboto_900Black, Roboto_900Black_Italic } from '@expo-google-fonts/roboto';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Connected() {\n  var Tab = createBottomTabNavigator();\n  var _useFonts = useFonts({\n      Roboto_100Thin: Roboto_100Thin,\n      Roboto_100Thin_Italic: Roboto_100Thin_Italic,\n      Roboto_300Light: Roboto_300Light,\n      Roboto_300Light_Italic: Roboto_300Light_Italic,\n      Roboto_400Regular: Roboto_400Regular,\n      Roboto_400Regular_Italic: Roboto_400Regular_Italic,\n      Roboto_500Medium: Roboto_500Medium,\n      Roboto_500Medium_Italic: Roboto_500Medium_Italic,\n      Roboto_700Bold: Roboto_700Bold,\n      Roboto_700Bold_Italic: Roboto_700Bold_Italic,\n      Roboto_900Black: Roboto_900Black,\n      Roboto_900Black_Italic: Roboto_900Black_Italic\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  if (!fontsLoaded) {\n    return _jsx(AppLoading, {});\n  } else {\n    return _jsxs(Tab.Navigator, {\n      screenOptions: function screenOptions(_ref) {\n        var route = _ref.route;\n        return {\n          tabBarIcon: function tabBarIcon(_ref2) {\n            var focused = _ref2.focused,\n              color = _ref2.color,\n              size = _ref2.size;\n            var iconName, height, width;\n            if (route.name === 'DEVICES') {\n              iconName = DevicesWhite;\n              height = 15;\n              width = 33;\n            } else if (route.name === 'ABOUT') {\n              iconName = AlertGray;\n              height = 20;\n              width = 33;\n            }\n            return _jsx(Image, {\n              source: iconName,\n              style: {\n                tintColor: focused ? \"white\" : '#A2A1A1',\n                height: height,\n                width: width,\n                resizeMode: 'contain'\n              }\n            });\n          }\n        };\n      },\n      tabBarOptions: {\n        style: {\n          height: 85\n        },\n        labelStyle: {\n          fontSize: 15,\n          paddingBottom: 5\n        },\n        activeTintColor: '#8a2be2',\n        inactiveTintColor: '#A2A1A1',\n        activeBackgroundColor: '#8a2be2',\n        inactiveBackgroundColor: '#8a2be2'\n      },\n      children: [_jsx(Tab.Screen, {\n        name: \"DEVICES\",\n        component: Devices\n      }), _jsx(Tab.Screen, {\n        name: \"ABOUT\",\n        component: AboutTeam\n      })]\n    });\n  }\n}","map":{"version":3,"names":["React","AppLoading","Image","DevicesWhite","AlertGray","createBottomTabNavigator","Devices","AboutTeam","useFonts","Roboto_100Thin","Roboto_100Thin_Italic","Roboto_300Light","Roboto_300Light_Italic","Roboto_400Regular","Roboto_400Regular_Italic","Roboto_500Medium","Roboto_500Medium_Italic","Roboto_700Bold","Roboto_700Bold_Italic","Roboto_900Black","Roboto_900Black_Italic","jsx","_jsx","jsxs","_jsxs","Connected","Tab","_useFonts","_useFonts2","_slicedToArray","fontsLoaded","Navigator","screenOptions","_ref","route","tabBarIcon","_ref2","focused","color","size","iconName","height","width","name","source","style","tintColor","resizeMode","tabBarOptions","labelStyle","fontSize","paddingBottom","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","children","Screen","component"],"sources":["C:/Users/esilva54/Documents/Projetos-estudo/RNJS/app11/src/Pages/Connected/Connected.js"],"sourcesContent":["import * as React from 'react';\r\nimport AppLoading from 'expo-app-loading';\r\nimport { Image } from 'react-native';\r\nimport DevicesWhite from \"../../../assets/icons/devices.png\";\r\nimport AlertGray from \"../../../assets/icons/alert-gray.png\";\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport Devices from \"../Devices/Devices.js\";\r\nimport AboutTeam from '../../Pages/AboutTeam/AboutTeam.js';\r\nimport {\r\n  useFonts,\r\n  Roboto_100Thin,\r\n  Roboto_100Thin_Italic,\r\n  Roboto_300Light,\r\n  Roboto_300Light_Italic,\r\n  Roboto_400Regular,\r\n  Roboto_400Regular_Italic,\r\n  Roboto_500Medium,\r\n  Roboto_500Medium_Italic,\r\n  Roboto_700Bold,\r\n  Roboto_700Bold_Italic,\r\n  Roboto_900Black,\r\n  Roboto_900Black_Italic,\r\n} from '@expo-google-fonts/roboto';\r\n\r\nexport default function Connected() {\r\n\r\n  // Creating var to control navigation between screen tabs\r\n  const Tab = createBottomTabNavigator();\r\n\r\n  let [fontsLoaded] = useFonts({\r\n    Roboto_100Thin,\r\n    Roboto_100Thin_Italic,\r\n    Roboto_300Light,\r\n    Roboto_300Light_Italic,\r\n    Roboto_400Regular,\r\n    Roboto_400Regular_Italic,\r\n    Roboto_500Medium,\r\n    Roboto_500Medium_Italic,\r\n    Roboto_700Bold,\r\n    Roboto_700Bold_Italic,\r\n    Roboto_900Black,\r\n    Roboto_900Black_Italic,\r\n  });\r\n\r\n  // Only return the content of this component if all\r\n  // the fonts are already loaded\r\n  if (!fontsLoaded) {\r\n    return <AppLoading />;\r\n  }\r\n  else {\r\n    return (\r\n      // Here on Tab.Navigator, we are checking if the user is on\r\n      // 'Devices' screen or 'About' tab.\r\n      // Tab that user is in has a white icon and text color.\r\n      // Tab that user isn't in has a gray icon and text color.\r\n      <Tab.Navigator\r\n        screenOptions={({ route }) => ({\r\n          tabBarIcon: ({ focused, color, size }) => {\r\n            let iconName, height, width;\r\n\r\n            // Check if user is in DEVICES tab\r\n            if (route.name === 'DEVICES') {\r\n              iconName = DevicesWhite;\r\n              height = 15;\r\n              width = 33;\r\n            }\r\n\r\n            // Check if user is in ABOUT tab\r\n            else if (route.name === 'ABOUT') {\r\n              iconName = AlertGray;\r\n              height = 20;\r\n              width = 33;\r\n            }\r\n\r\n            // Return a white or 'gray' icon depending on which tab is activated\r\n            return <Image\r\n              source={iconName}\r\n              style={{\r\n                tintColor: focused ? \"white\" : '#A2A1A1',\r\n                height: height,\r\n                width: width,\r\n                resizeMode: 'contain',\r\n              }}\r\n            />;\r\n          },\r\n        })}\r\n        // Here we define that the active tab will receive a white icon and\r\n        // color text, whether the inactive tab will receive a gray ones \r\n        tabBarOptions={{\r\n          style: { height: 85 },\r\n          labelStyle: { fontSize: 15, paddingBottom: 5 },\r\n          activeTintColor: '#8a2be2',\r\n          inactiveTintColor: '#A2A1A1',\r\n          activeBackgroundColor: '#8a2be2',\r\n          inactiveBackgroundColor: '#8a2be2'\r\n        }}\r\n      >\r\n        {/* Creating our 2 tabs */}\r\n        <Tab.Screen name=\"DEVICES\" component={Devices} />\r\n        <Tab.Screen name=\"ABOUT\" component={AboutTeam} />\r\n      </Tab.Navigator>\r\n    );\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}